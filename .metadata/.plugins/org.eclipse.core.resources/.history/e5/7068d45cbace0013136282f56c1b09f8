package upgma;

public class UPGMA {
	
	public void action(){
		
	}
	
	public boolean checkMatrixToTerminateIterate(double[][] matrixValue){		
		if(matrixValue.length == 1){
			return true;
		}
		return false;
	}
	
	public double[][] clusterTwoMatrix(double[][] oldMatrix, int firstNode, int secondNode){
		double[][] newMatrix = null;
		
		int numOfNode = oldMatrix.length;
		double[][] addNodeClusterMatrix = new double[numOfNode + 1][numOfNode + 1];
		for (int i = 0; i < addNodeClusterMatrix.length; i++) {
			if(i != numOfNode){
				for (int j = 0; j < addNodeClusterMatrix.length; j++) {
					if(j == numOfNode){
						addNodeClusterMatrix[i][j] = (oldMatrix[i][firstNode] + oldMatrix[i][secondNode]) / 2;
					}else{
						addNodeClusterMatrix[i][j] = oldMatrix[i][j];
					}
				}			
			}else{
				for (int j = 0; j < addNodeClusterMatrix.length; j++){
					addNodeClusterMatrix[i][j] = addNodeClusterMatrix[j][i];
				}
			}
		}
		
//		for (int i = 0; i < addNodeClusterMatrix.length; i++) {
//			for (int j = 0; j < addNodeClusterMatrix.length; j++) {
//				System.out.print(" " + addNodeClusterMatrix[i][j]);
//			}
//			System.out.println();
//		}
		
		newMatrix = new double[numOfNode - 1][numOfNode - 1];
		int row = 0, col = 0;
		for (int i = 0; i < addNodeClusterMatrix.length; i++) {
			if(i != firstNode && i != secondNode){
				col = 0;
				for (int j = 0; j < addNodeClusterMatrix.length; j++) {
					if(j != firstNode && j != secondNode){
						newMatrix[row][col] = addNodeClusterMatrix[i][j];
						col++;
					}					
				}
				row++;
			}else{
				col = 0;
				for (int j = 0; j < addNodeClusterMatrix.length; j++) {
					if(j != firstNode && j != secondNode){
						newMatrix[row][col] = addNodeClusterMatrix[j][i];
						col++;
					}					
				}
			}
		}
		
		return newMatrix;
	}
	
	public Node[] clusterTwoNode(Node[] sequences, double distance, int firstNode, int secondNode){
		Node[] newSequence = new Node[sequences.length - 1];
		
		Node node = new Node("("+sequences[firstNode].getNameNode()+":"+distance/2+ "," + sequences[secondNode].getNameNode()+":"+distance/2+")");
		node.setNodeLeft(sequences[firstNode]);
		node.setNodeRight(sequences[secondNode]);
		node.setDistance(distance);
		
		sequences[firstNode] = node;
		sequences[secondNode] = null;
		
		int j = 0;
		for (int i = 0; i < sequences.length; i++) {
			if(sequences[i] != null){
				newSequence[j++] = sequences[i];
			}
		}		
		return newSequence;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node[] nodeList = new Node[5];
		String[] nodeString = {"A", "B", "C", "D", "E"};
		for (int i = 0; i < nodeList.length; i++) {
			nodeList[i] = new Node(nodeString[i]);
		}
				
		double[][] matrix = {{0, 10, 12, 9, 7},
							{10, 0, 4, 4, 14},
							{12, 4, 0, 6, 16},
							{9, 4, 6, 0, 13}, 
							{7, 14, 16, 13, 0}};
		
//		double[][] matrix = { { 350.0, 12.0, 17.0, 755.0, 17.0},
//							 { -12.0, -17.0, -755.0, -17.0, -12.0},
//							 { -17.0, -755.0, -17.0, -12.0, 450.0},
//							 { -755.0, -17.0, -12.0, 450.0, 10.0},
//							 { -17.0, -12.0, 450.0, 10.0, -765.0}};
				
		UPGMA upgma = new UPGMA();
		
		while(!upgma.checkMatrixToTerminateIterate(matrix)){
			
			Point point = MatrixAction.findPointMinValueInMatrix(matrix);
			//System.out.println(point.getValue() + " : " + point.getRow() + " : " + point.getCol());
			nodeList = upgma.clusterTwoNode(nodeList, matrix[point.getRow()][point.getCol()], point.getRow(), point.getCol());
			matrix = upgma.clusterTwoMatrix(matrix, point.getRow(), point.getCol());
//			for (int i = 0; i < matrix.length; i++) {
//				for (int j = 0; j < matrix.length; j++) {
//					System.out.print(" " + matrix[i][j]);
//				}
//				System.out.println();
//			}
			for(int i=0;i<nodeList.length;i++)
				System.out.println(nodeList[i].getNameNode());
		}	
		
		
	}
	
}
